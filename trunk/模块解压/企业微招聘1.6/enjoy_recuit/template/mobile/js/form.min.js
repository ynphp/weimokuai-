var Validator = function() {
		function t(i) {
			this.rules = Utility.extend({}, t.defaults.rules, i && i.rules)
		}
		return t.defaults = {
			rules: {
				mobile: {
					reg: /^1\d{10}$/,
					msg: "您填写的手机号不符合规范，请填写11位手机号码"
				},
				code: {
					reg: /[\s\S]+/,
					msg: "您填写的验证码为空"
				},
				password: {
					reg: /^[\w]{6,}$/,
					msg: "密码不符合规范，至少为6位以上的数字和密码组合"
				},
				repassword: {
					reg: /[\s\S]+/,
					msg: "您填写的确认密码为空"
				},
				authpassword: {
					reg: /[\s\S]+/,
					msg: "您填写的密码为空"
				},
				uname: {
					reg: /[\s\S]+/,
					msg: "您填写的姓名为空"
				},
				age: {
					reg: /[\s\S]+/,
					msg: "您填写的年龄为空"
				},
				email: {
					reg: /^([\w-])+(\.[\w-]+)*@([\w-])+((\.[\w-]+)+)$/,
					msg: "您填写的email格式不正确"
				},
				country: {
					reg: /[\s\S]+/,
					msg: "您还未选择国家"
				},
				email_local: {
					reg: /[\s\S]+/,
					msg: "您还未填写邮箱"
				},
				idcard: {
					reg: /[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X|x)/,
					msg: "您填写的身份证不符合规范"
				},
				company: {
					reg: /[\s\S]+/,
					msg: "您填写的单位名称为空"
				},
				cname: {
					reg: /[\s\S]+/,
					msg: "您填写的证书名称为空"
				}
			}
		}, t.prototype = {
			validate: function(t, i) {
				return this.rules[t].reg.test(i)
			}
		}, t
	}(),
	FormModule = {
		init: function(t) {
			this.validator = new Validator, this.$form = $(t), this.$submitBtn = $("input[type='submit']", this.$form), this.inputs = [];
			var i = this;
			return this.$form.find("input[data-validate]").each(function() {
				var t = $(this),
					s = t.data("validate");
				i.inputs.push([s, t])
			}), this.bindEvents(), this
		},
		bindEvents: function() {
			this.$form.on("submit", $.proxy(this.validateForm, this)), this.$form.on("submit", $.proxy(this.antiMultipleSubmit, this))
		},
		antiMultipleSubmit: function() {
			return this.disabled() ? !1 : void this.disable()
		},
		disable: function() {
			this.$submitBtn.addClass("disabled")
		},
		disabled: function() {
			return this.$submitBtn.hasClass("disabled")
		},
		enable: function() {
			this.$submitBtn.removeClass("disabled")
		},
		validateForm: function(t) {
			var i = !0;
			return this.inputs.every(function(t) {
				var s = t[0],
					e = t[1],
					r = this.validator;
				return i = r.validate(s, e.val().trim()), i || Utility.showMsg(r.rules[s].msg, i), i
			}, this), i || t.stopImmediatePropagation(), i
		}
	};